// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}




// AUTHENTICATION

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  projects Project[]

  //Team Team[]

  //TeamMember TeamMember[]

  customer Customer[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}



// MY 

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}
enum Priority {
  LOW
  MEDIUM
  HIGH
}

/*
enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}
*/


model Project {
  id String @id @default(cuid())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dueDate DateTime?
  status Status @default(PENDING)
  priority Priority @default(MEDIUM)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  customerId String?
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  task Task[]

  //Budget Budget[]

  //Invoice Invoice[]


}


model Task {
  id String @id @default(cuid())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dueDate DateTime?
  status Status @default(PENDING)
  priority Priority @default(MEDIUM)
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Customer {
  id String @id @default(cuid())
  name String
  email String? @unique
  phone String?
  address String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  //Invoice Invoice[]

  project Project[]
}

/*model Budget {
  id String @id @default(cuid())
  name String
  amount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  BudgetItem BudgetItem[]
}

model BudgetItem {
  id String @id @default(cuid())
  name String
  amount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  budgetId String
  budget Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)
}

model Invoice {
  id String @id @default(cuid())
  name String
  totalAmount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  status InvoiceStatus @default(PENDING)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  customerId String?
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  InvoiceItem InvoiceItem[]

}

model InvoiceItem {
  id String @id @default(cuid())
  name String
  amount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoiceId String
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}



model Team {
  id String @id @default(cuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  TeamMember TeamMember[]
}

model TeamMember {
  id String @id @default(cuid())
  userId String
  teamId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}
*/