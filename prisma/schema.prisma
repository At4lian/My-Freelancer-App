// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// ------------- ENUMS -------------

enum UserRole {
  ADMIN
  USER
  USER_PRO
  USER_ENETERPRISE
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BudgetStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
  VOID
}

enum GearItemStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  REPAIR_PENDING
  RETIRED
  LOST
  SOLD
}

enum GearCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  POOR
  FOR_PARTS
}

enum GearAssignmentStatus {
  CHECKED_OUT
  RETURNED
  OVERDUE
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
// ------------- MODELS -------------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

    // Relations
  accounts             Account[]
  twoFactorTokens      TwoFactorToken[]

  createdCustomers     Customer[]             @relation("CustomerCreatedBy")
  createdProjects      Project[]              @relation("ProjectCreatedBy")
  createdBudgets       Budget[]               @relation("BudgetCreatedBy")
  createdServices      Service[]              @relation("ServiceCreatedBy")
  createdInvoices      Invoice[]              @relation("InvoiceCreatedBy")

  ownedTeams           Team[]                 @relation("TeamOwner")
  teamMemberships      TeamMember[]

  createdGearCategories GearCategory[]        @relation("GearCategoryCreatedBy")
  ownedGearItems       GearItem[]             @relation("GearItemOwnedBy")
  createdGearItems     GearItem[]             @relation("GearItemCreatedBy")
  assignmentLogs       GearAssignmentLog[]    @relation("GearAssignmentLoggedBy")
  maintenanceLogs      GearMaintenanceLog[]   @relation("GearMaintenanceLoggedBy")

  GearAssignmentLog GearAssignmentLog[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
  User User[]
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Customer {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  phone            String?
  address          String?
  company_name     String?
  ico              String?
  dic              String?
  platformUserId   String?  // fk to User if customer is platform user
  createdByUserId  String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  createdBy        User     @relation("CustomerCreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
  projects         Project[]
  invoices         Invoice[]
}

model Project {
  id              String        @id @default(cuid())
  name            String
  description     String?       @db.Text
  status          ProjectStatus @default(PENDING)
  start_date      DateTime?     @db.Date
  end_date        DateTime?     @db.Date
  deadline_date   DateTime?     @db.Date
  customerId      String
  priority        PriorityLevel @default(MEDIUM)
  createdByUserId String
  assignedTeamId  String?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  customer        Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdBy       User           @relation("ProjectCreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
  assignedTeam    Team?          @relation(fields: [assignedTeamId], references: [id])
  budgets         Budget[]
  projectItems    ProjectItem[]
  invoices        Invoice[]
  gearAssignments GearAssignmentLog[]
}

model Budget {
  id              String       @id @default(cuid())
  projectId       String
  name            String       @default("Budget Proposal")
  estimatedAmount Decimal      @db.Decimal(12,2)
  currency        String       @default("CZK")
  description     String?      @db.Text
  status          BudgetStatus @default(DRAFT)
  createdByUserId String
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  project         Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy       User         @relation("BudgetCreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
}

model Service {
  id              String   @id @default(cuid())
  name            String
  description     String?  @db.Text
  unit_price      Decimal  @db.Decimal(10,2)
  unit            String   @default("hour")
  createdByUserId String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  createdBy       User     @relation("ServiceCreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
  projectItems    ProjectItem[]
  invoiceItems    InvoiceItem[]
}

model ProjectItem {
  id                     String   @id @default(cuid())
  projectId              String
  serviceId              String?
  custom_item_name       String?
  custom_item_description String? @db.Text
  quantity               Decimal  @db.Decimal(10,2) @default(1)
  unit_price             Decimal  @db.Decimal(10,2)
  notes                  String?  @db.Text
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  project                Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  service                Service? @relation(fields: [serviceId], references: [id])
  invoiceItems           InvoiceItem[]
}

model Invoice {
  id                String        @id @default(cuid())
  invoice_number    String        @unique
  projectId         String?
  customerId        String
  issue_date        DateTime      @db.Date @default(now())
  due_date          DateTime      @db.Date
  paid_date         DateTime?     @db.Date
  status            InvoiceStatus @default(DRAFT)
  currency          String        @default("CZK")
  subtotal_amount   Decimal       @db.Decimal(12,2) @default(0)
  discount_amount   Decimal       @db.Decimal(12,2) @default(0)
  tax_rate          Decimal       @db.Decimal(5,4)  @default(0)
  tax_amount        Decimal       @db.Decimal(12,2) @default(0)
  grand_total       Decimal       @db.Decimal(12,2) @default(0)
  notes_to_customer String?       @db.Text
  private_notes     String?       @db.Text
  terms_and_conditions String?    @db.Text
  payment_method    String?
  bank_name         String?
  bank_account_number String?
  iban              String?
  swift_bic         String?
  variable_symbol   String?
  constant_symbol   String?
  createdByUserId   String
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt

  project           Project?       @relation(fields: [projectId], references: [id])
  customer          Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdBy         User           @relation("InvoiceCreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
  items             InvoiceItem[]
}

model InvoiceItem {
  id               String   @id @default(cuid())
  invoiceId        String
  projectItemId    String?
  serviceId        String?
  description      String
  quantity         Decimal  @db.Decimal(10,2)
  unit_price       Decimal  @db.Decimal(10,2)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  invoice          Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  projectItem      ProjectItem? @relation(fields: [projectItemId], references: [id])
  service          Service? @relation(fields: [serviceId], references: [id])
}

/// ------------- TEAM MANAGEMENT -------------

model Team {
  id            String   @id @default(cuid())
  name          String
  ownerUserId   String
  description   String?  @db.Text
  avatar_url    String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  owner         User     @relation("TeamOwner", fields: [ownerUserId], references: [id], onDelete: Cascade)
  members       TeamMember[]
  projects      Project[]
  gearItems     GearItem[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  joined_at DateTime @default(now())

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId], map: "unique_team_user")
}

/// ------------- GEAR MANAGEMENT -------------

model GearCategory {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?  @db.Text
  createdByUserId String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  createdBy       User     @relation("GearCategoryCreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
  gearItems       GearItem[]
}

model GearItem {
  id                String         @id @default(cuid())
  name              String
  description       String?        @db.Text
  gearCategoryId    String?
  serial_number     String?        @unique
  internal_tag_id   String?        @unique
  model_number      String?
  manufacturer      String?
  purchase_date     DateTime?       @db.Date
  purchase_price    Decimal?        @db.Decimal(10,2)
  currency          String          @default("CZK")
  purchased_from    String?
  warranty_expires_on DateTime?     @db.Date
  status            GearItemStatus  @default(AVAILABLE)
  condition         GearCondition   @default(GOOD)
  current_location  String?
  notes             String?         @db.Text
  ownedByUserId     String?
  managedByTeamId   String?
  specifications    String?         @db.Text
  createdByUserId   String
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt

  category          GearCategory?   @relation(fields: [gearCategoryId], references: [id])
  ownedBy           User?           @relation("GearItemOwnedBy", fields: [ownedByUserId], references: [id])
  managedByTeam     Team?           @relation(fields: [managedByTeamId], references: [id])
  createdBy         User            @relation("GearItemCreatedBy", fields: [createdByUserId], references: [id], onDelete: Cascade)
  assignments       GearAssignmentLog[]
  maintenanceLogs   GearMaintenanceLog[]

  @@index([gearCategoryId])
  @@index([ownedByUserId])
  @@index([managedByTeamId])
  @@index([status])
  @@index([manufacturer])
}

model GearAssignmentLog {
  id                   String            @id @default(cuid())
  gearItemId           String
  projectId            String?
  assignedToUserId     String?
  assigned_from        DateTime          @default(now())
  expected_return_date DateTime?         @db.Date
  actual_return_date   DateTime?         @db.Date
  purpose              String?
  status               GearAssignmentStatus?
  checkout_notes       String?           @db.Text
  return_notes         String?           @db.Text
  condition_on_checkout GearCondition?
  condition_on_return   GearCondition?
  loggedByUserId       String
  created_at           DateTime          @default(now())

  gearItem             GearItem          @relation(fields: [gearItemId], references: [id], onDelete: Cascade)
  project              Project?          @relation(fields: [projectId], references: [id])
  assignedToUser       User?             @relation(fields: [assignedToUserId], references: [id])
  loggedBy             User              @relation("GearAssignmentLoggedBy", fields: [loggedByUserId], references: [id], onDelete: Cascade)

  @@index([gearItemId, assigned_from])
  @@index([projectId])
  @@index([assignedToUserId])
  @@index([status])
}

model GearMaintenanceLog {
  id                   String            @id @default(cuid())
  gearItemId           String
  maintenance_date     DateTime          @db.Date
  description          String
  cost                 Decimal?          @db.Decimal(10,2)
  currency             String            @default("CZK")
  service_provider     String?
  notes                String?           @db.Text
  next_maintenance_due DateTime?         @db.Date
  status               MaintenanceStatus?
  loggedByUserId       String
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt

  gearItem             GearItem          @relation(fields: [gearItemId], references: [id], onDelete: Cascade)
  loggedBy             User              @relation("GearMaintenanceLoggedBy", fields: [loggedByUserId], references: [id], onDelete: Cascade)

  @@index([gearItemId, maintenance_date])
  @@index([status])
}
