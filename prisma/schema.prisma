// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// ------------- ENUMS -------------

enum UserRole {
  ADMIN
  USER
  USER_PRO
  USER_ENETERPRISE
}


// ------------- MODELS -------------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

    // Relations
  accounts             Account[]
  twoFactorTokens      TwoFactorToken[]

  Organization Organization[]

  OrganizationMember OrganizationMember[]

  ProjectMember ProjectMember[]

  GearAllocation GearAllocation[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
  User User[]
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}




// ---------- ENUMS (MVP) ----------
enum OrgRole {
  OWNER
  ADMIN
  MEMBER
  FREELANCER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum GearCondition {
  OK
  NEEDS_SERVICE
  BROKEN
}

// ---------- CORE B-to-B TENANCY ----------
model Organization {
  id         String   @id @default(cuid())
  name       String
  ownerId    String
  createdAt  DateTime @default(now())

  // Relations
  owner      User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members    OrganizationMember[]
  projects   Project[]
  gear       Gear[]

  @@index([ownerId])
}

model OrganizationMember {
  // composite PK → jeden user v organizaci max 1×
  organizationId String
  userId         String
  role           OrgRole   @default(MEMBER)
  joinedAt       DateTime  @default(now())

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([organizationId, userId])
}

// ---------- PROJECTS & TEAM ----------
model Project {
  id              String        @id @default(cuid())
  organizationId  String
  title           String
  status          ProjectStatus @default(PLANNING)
  description     String?
  startDate       DateTime?
  dueDate         DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members         ProjectMember[]
  gearAllocations GearAllocation[]
}

model ProjectMember {
  projectId  String
  userId     String
  position   String?
  hourlyRate Decimal?     @db.Decimal(10, 2)
  assignedAt DateTime     @default(now())

  // Relations
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
}

// ---------- GEAR / INVENTORY ----------
model Gear {
  id              String        @id @default(cuid())
  organizationId  String
  name            String
  category        String?
  brand           String?
  model           String?
  serialNumber    String?       @unique
  purchaseDate    DateTime?
  condition       GearCondition @default(OK)
  location        String?
  createdAt       DateTime      @default(now())

  // Relations
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  allocations     GearAllocation[]
}

model GearAllocation {
  gearId      String
  projectId   String
  startTs     DateTime
  endTs       DateTime
  allocatedBy String            // who booked the item

  // Relations
  gear        Gear   @relation(fields: [gearId], references: [id], onDelete: Cascade)
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [allocatedBy], references: [id], onDelete: Cascade)

  // composite PK = unikátní časový blok pro dané gear
  @@id([gearId, startTs, endTs])
  @@index([projectId])
}


